"""add cofilype

Revision ID: b82587c107fd
Revises: 61a36e860a75
Create Date: 2025-06-15 12:13:53.683452

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b82587c107fd'
down_revision: Union[str, None] = '61a36e860a75'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('student_exam_exam_id_fkey', 'student_exam', type_='foreignkey')
    # Другие constraints при необходимости...

    # Затем таблицы
    op.drop_table('student_exam')
    op.drop_table('exam')
    op.drop_table('direction_statement')
    op.drop_table('statement')
    op.drop_table('direction')
    op.drop_table('student')

    op.create_foreign_key(None, 'competition_group', 'competitions', ['competition_id'], ['id'])
    op.alter_column('competitions', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('competitions', 'id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_constraint(None, 'competition_group', type_='foreignkey')
    op.create_table('student',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('student_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('middle_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('age', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='student_pkey'),
    sa.UniqueConstraint('phone', name='student_phone_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('direction',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('direction_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='direction_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('statement',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('statement_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('form_education', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('date_created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['student.id'], name='statement_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='statement_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('direction_statement',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('statement_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('direction_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['direction_id'], ['direction.id'], name='direction_statement_direction_id_fkey'),
    sa.ForeignKeyConstraint(['statement_id'], ['statement.id'], name='direction_statement_statement_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='direction_statement_pkey')
    )
    op.create_table('student_exam',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('exam_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['exam_id'], ['exam.id'], name='student_exam_exam_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['student.id'], name='student_exam_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='student_exam_pkey')
    )
    op.create_table('exam',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('subject', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='exam_pkey')
    )
    # ### end Alembic commands ###
